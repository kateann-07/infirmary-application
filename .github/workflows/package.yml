name: Package and Create Artifact

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Release"]
    branches: [ master ]
    types: [ completed ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-package:
    runs-on: windows-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get latest tag
        id: get-version
        run: |
          $latestTag = git describe --tags --abbrev=0
          if ($latestTag) {
            $version = $latestTag -replace '[^0-9\.]', ''
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "tag=$latestTag" >> $env:GITHUB_OUTPUT
            echo "Found version: $version from tag: $latestTag"
          } else {
            $version = "1.0.0"
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "tag=v$version" >> $env:GITHUB_OUTPUT
            echo "No tags found, using default version: $version"
          }

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Install WIX toolset
        run: |
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe -OutFile wix311.exe
          Start-Process -FilePath ".\wix311.exe" -ArgumentList "/install", "/quiet", "/norestart" -Wait
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Project version
        run: echo "Building version ${{ steps.get-version.outputs.version }} from tag ${{ steps.get-version.outputs.tag }}"

      - name: Set project version based on latest Git tag
        run: mvn versions:set "-DnewVersion=${{ steps.get-version.outputs.version }}"

      - name: Run clean build with Maven
        run: mvn clean package

      - name: Remove backup pom
        run: rm -f pom.xml.versionsBackup
        shell: bash

      - name: Create JavaFX application installer artifact
        run: |
          jpackage --input target `
            --name InfirmaryApplication `
            --main-jar "infirmary-application-${{ steps.get-version.outputs.version }}.jar" `
            --type exe `
            --dest target `
            --win-menu `
            --win-shortcut `
            --module-path "target/lib" `
            --add-modules javafx.controls,javafx.fxml,javafx.graphics,javafx.base `
            --app-version "${{ steps.get-version.outputs.version }}" `
            --vendor "RoCS" `
            --description "Infirmary Desktop Application" `
            --win-dir-chooser `
            --verbose `

      - name: Upload the installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: InfirmaryApplication-Installer-${{ steps.get-version.outputs.version }}
          path: target/InfirmaryApplication-*.exe

      - name: Upload installer to release
        if: github.event_name == 'workflow_run'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get-version.outputs.tag }}
          files: target/InfirmaryApplication-*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}